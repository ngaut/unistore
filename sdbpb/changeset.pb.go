// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: changeset.proto

package sdbpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SplitStage int32

const (
	SplitStage_INITIAL              SplitStage = 0
	SplitStage_PRE_SPLIT            SplitStage = 1
	SplitStage_PRE_SPLIT_FLUSH_DONE SplitStage = 2
	SplitStage_SPLIT_FILE_DONE      SplitStage = 3
)

var SplitStage_name = map[int32]string{
	0: "INITIAL",
	1: "PRE_SPLIT",
	2: "PRE_SPLIT_FLUSH_DONE",
	3: "SPLIT_FILE_DONE",
}

var SplitStage_value = map[string]int32{
	"INITIAL":              0,
	"PRE_SPLIT":            1,
	"PRE_SPLIT_FLUSH_DONE": 2,
	"SPLIT_FILE_DONE":      3,
}

func (x SplitStage) String() string {
	return proto.EnumName(SplitStage_name, int32(x))
}

func (SplitStage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{0}
}

type ChangeSet struct {
	ShardID     uint64      `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	ShardVer    uint64      `protobuf:"varint,2,opt,name=shardVer,proto3" json:"shardVer,omitempty"`
	Compaction  *Compaction `protobuf:"bytes,4,opt,name=compaction,proto3" json:"compaction,omitempty"`
	Flush       *Flush      `protobuf:"bytes,5,opt,name=flush,proto3" json:"flush,omitempty"`
	Snapshot    *Snapshot   `protobuf:"bytes,6,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Stage       SplitStage  `protobuf:"varint,7,opt,name=stage,proto3,enum=sdbpb.SplitStage" json:"stage,omitempty"`
	PreSplit    *PreSplit   `protobuf:"bytes,8,opt,name=preSplit,proto3" json:"preSplit,omitempty"`
	SplitFiles  *SplitFiles `protobuf:"bytes,9,opt,name=splitFiles,proto3" json:"splitFiles,omitempty"`
	Split       *Split      `protobuf:"bytes,10,opt,name=split,proto3" json:"split,omitempty"`
	ShardDelete bool        `protobuf:"varint,11,opt,name=shardDelete,proto3" json:"shardDelete,omitempty"`
	// The sequence value is not set by the DB when generating the change set, user have to assign the value.
	// If specified, we check sequence is monotonically increasing.
	Sequence             uint64   `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty"`
	NextMemTableSize     int64    `protobuf:"varint,13,opt,name=nextMemTableSize,proto3" json:"nextMemTableSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeSet) Reset()         { *m = ChangeSet{} }
func (m *ChangeSet) String() string { return proto.CompactTextString(m) }
func (*ChangeSet) ProtoMessage()    {}
func (*ChangeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{0}
}
func (m *ChangeSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeSet.Merge(m, src)
}
func (m *ChangeSet) XXX_Size() int {
	return m.Size()
}
func (m *ChangeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeSet.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeSet proto.InternalMessageInfo

func (m *ChangeSet) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *ChangeSet) GetShardVer() uint64 {
	if m != nil {
		return m.ShardVer
	}
	return 0
}

func (m *ChangeSet) GetCompaction() *Compaction {
	if m != nil {
		return m.Compaction
	}
	return nil
}

func (m *ChangeSet) GetFlush() *Flush {
	if m != nil {
		return m.Flush
	}
	return nil
}

func (m *ChangeSet) GetSnapshot() *Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *ChangeSet) GetStage() SplitStage {
	if m != nil {
		return m.Stage
	}
	return SplitStage_INITIAL
}

func (m *ChangeSet) GetPreSplit() *PreSplit {
	if m != nil {
		return m.PreSplit
	}
	return nil
}

func (m *ChangeSet) GetSplitFiles() *SplitFiles {
	if m != nil {
		return m.SplitFiles
	}
	return nil
}

func (m *ChangeSet) GetSplit() *Split {
	if m != nil {
		return m.Split
	}
	return nil
}

func (m *ChangeSet) GetShardDelete() bool {
	if m != nil {
		return m.ShardDelete
	}
	return false
}

func (m *ChangeSet) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *ChangeSet) GetNextMemTableSize() int64 {
	if m != nil {
		return m.NextMemTableSize
	}
	return 0
}

type Compaction struct {
	Cf                   int32          `protobuf:"varint,1,opt,name=cf,proto3" json:"cf,omitempty"`
	Level                uint32         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	TableCreates         []*TableCreate `protobuf:"bytes,3,rep,name=tableCreates,proto3" json:"tableCreates,omitempty"`
	TopDeletes           []uint64       `protobuf:"varint,4,rep,packed,name=topDeletes,proto3" json:"topDeletes,omitempty"`
	BottomDeletes        []uint64       `protobuf:"varint,5,rep,packed,name=bottomDeletes,proto3" json:"bottomDeletes,omitempty"`
	Rejected             bool           `protobuf:"varint,6,opt,name=rejected,proto3" json:"rejected,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Compaction) Reset()         { *m = Compaction{} }
func (m *Compaction) String() string { return proto.CompactTextString(m) }
func (*Compaction) ProtoMessage()    {}
func (*Compaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{1}
}
func (m *Compaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Compaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Compaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Compaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Compaction.Merge(m, src)
}
func (m *Compaction) XXX_Size() int {
	return m.Size()
}
func (m *Compaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Compaction.DiscardUnknown(m)
}

var xxx_messageInfo_Compaction proto.InternalMessageInfo

func (m *Compaction) GetCf() int32 {
	if m != nil {
		return m.Cf
	}
	return 0
}

func (m *Compaction) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Compaction) GetTableCreates() []*TableCreate {
	if m != nil {
		return m.TableCreates
	}
	return nil
}

func (m *Compaction) GetTopDeletes() []uint64 {
	if m != nil {
		return m.TopDeletes
	}
	return nil
}

func (m *Compaction) GetBottomDeletes() []uint64 {
	if m != nil {
		return m.BottomDeletes
	}
	return nil
}

func (m *Compaction) GetRejected() bool {
	if m != nil {
		return m.Rejected
	}
	return false
}

type Flush struct {
	L0Create             *L0Create `protobuf:"bytes,1,opt,name=l0Create,proto3" json:"l0Create,omitempty"`
	CommitTS             uint64    `protobuf:"varint,2,opt,name=commitTS,proto3" json:"commitTS,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Flush) Reset()         { *m = Flush{} }
func (m *Flush) String() string { return proto.CompactTextString(m) }
func (*Flush) ProtoMessage()    {}
func (*Flush) Descriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{2}
}
func (m *Flush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Flush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Flush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Flush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flush.Merge(m, src)
}
func (m *Flush) XXX_Size() int {
	return m.Size()
}
func (m *Flush) XXX_DiscardUnknown() {
	xxx_messageInfo_Flush.DiscardUnknown(m)
}

var xxx_messageInfo_Flush proto.InternalMessageInfo

func (m *Flush) GetL0Create() *L0Create {
	if m != nil {
		return m.L0Create
	}
	return nil
}

func (m *Flush) GetCommitTS() uint64 {
	if m != nil {
		return m.CommitTS
	}
	return 0
}

type Snapshot struct {
	Start                []byte         `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  []byte         `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Properties           *Properties    `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
	SplitKeys            [][]byte       `protobuf:"bytes,4,rep,name=splitKeys,proto3" json:"splitKeys,omitempty"`
	L0Creates            []*L0Create    `protobuf:"bytes,5,rep,name=l0Creates,proto3" json:"l0Creates,omitempty"`
	TableCreates         []*TableCreate `protobuf:"bytes,6,rep,name=tableCreates,proto3" json:"tableCreates,omitempty"`
	CommitTS             uint64         `protobuf:"varint,7,opt,name=commitTS,proto3" json:"commitTS,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{3}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return m.Size()
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Snapshot) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *Snapshot) GetProperties() *Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Snapshot) GetSplitKeys() [][]byte {
	if m != nil {
		return m.SplitKeys
	}
	return nil
}

func (m *Snapshot) GetL0Creates() []*L0Create {
	if m != nil {
		return m.L0Creates
	}
	return nil
}

func (m *Snapshot) GetTableCreates() []*TableCreate {
	if m != nil {
		return m.TableCreates
	}
	return nil
}

func (m *Snapshot) GetCommitTS() uint64 {
	if m != nil {
		return m.CommitTS
	}
	return 0
}

type SplitFiles struct {
	L0Creates            []*L0Create    `protobuf:"bytes,1,rep,name=l0Creates,proto3" json:"l0Creates,omitempty"`
	TableCreates         []*TableCreate `protobuf:"bytes,2,rep,name=tableCreates,proto3" json:"tableCreates,omitempty"`
	TableDeletes         []uint64       `protobuf:"varint,3,rep,packed,name=tableDeletes,proto3" json:"tableDeletes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SplitFiles) Reset()         { *m = SplitFiles{} }
func (m *SplitFiles) String() string { return proto.CompactTextString(m) }
func (*SplitFiles) ProtoMessage()    {}
func (*SplitFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{4}
}
func (m *SplitFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplitFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplitFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitFiles.Merge(m, src)
}
func (m *SplitFiles) XXX_Size() int {
	return m.Size()
}
func (m *SplitFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitFiles.DiscardUnknown(m)
}

var xxx_messageInfo_SplitFiles proto.InternalMessageInfo

func (m *SplitFiles) GetL0Creates() []*L0Create {
	if m != nil {
		return m.L0Creates
	}
	return nil
}

func (m *SplitFiles) GetTableCreates() []*TableCreate {
	if m != nil {
		return m.TableCreates
	}
	return nil
}

func (m *SplitFiles) GetTableDeletes() []uint64 {
	if m != nil {
		return m.TableDeletes
	}
	return nil
}

type L0Create struct {
	ID                   uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Smallest             []byte      `protobuf:"bytes,2,opt,name=smallest,proto3" json:"smallest,omitempty"`
	Biggest              []byte      `protobuf:"bytes,3,opt,name=biggest,proto3" json:"biggest,omitempty"`
	Properties           *Properties `protobuf:"bytes,4,opt,name=properties,proto3" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *L0Create) Reset()         { *m = L0Create{} }
func (m *L0Create) String() string { return proto.CompactTextString(m) }
func (*L0Create) ProtoMessage()    {}
func (*L0Create) Descriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{5}
}
func (m *L0Create) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L0Create) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L0Create.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L0Create) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L0Create.Merge(m, src)
}
func (m *L0Create) XXX_Size() int {
	return m.Size()
}
func (m *L0Create) XXX_DiscardUnknown() {
	xxx_messageInfo_L0Create.DiscardUnknown(m)
}

var xxx_messageInfo_L0Create proto.InternalMessageInfo

func (m *L0Create) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *L0Create) GetSmallest() []byte {
	if m != nil {
		return m.Smallest
	}
	return nil
}

func (m *L0Create) GetBiggest() []byte {
	if m != nil {
		return m.Biggest
	}
	return nil
}

func (m *L0Create) GetProperties() *Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

type TableCreate struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Level                uint32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	CF                   int32    `protobuf:"varint,3,opt,name=CF,proto3" json:"CF,omitempty"`
	Smallest             []byte   `protobuf:"bytes,4,opt,name=smallest,proto3" json:"smallest,omitempty"`
	Biggest              []byte   `protobuf:"bytes,5,opt,name=biggest,proto3" json:"biggest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableCreate) Reset()         { *m = TableCreate{} }
func (m *TableCreate) String() string { return proto.CompactTextString(m) }
func (*TableCreate) ProtoMessage()    {}
func (*TableCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{6}
}
func (m *TableCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableCreate.Merge(m, src)
}
func (m *TableCreate) XXX_Size() int {
	return m.Size()
}
func (m *TableCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_TableCreate.DiscardUnknown(m)
}

var xxx_messageInfo_TableCreate proto.InternalMessageInfo

func (m *TableCreate) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TableCreate) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *TableCreate) GetCF() int32 {
	if m != nil {
		return m.CF
	}
	return 0
}

func (m *TableCreate) GetSmallest() []byte {
	if m != nil {
		return m.Smallest
	}
	return nil
}

func (m *TableCreate) GetBiggest() []byte {
	if m != nil {
		return m.Biggest
	}
	return nil
}

type PreSplit struct {
	Keys [][]byte `protobuf:"bytes,1,rep,name=Keys,proto3" json:"Keys,omitempty"`
	// the properties that is in mem-table, not persistent.
	// If it is nil, then the pre split is stable.
	MemProps             *Properties `protobuf:"bytes,2,opt,name=memProps,proto3" json:"memProps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PreSplit) Reset()         { *m = PreSplit{} }
func (m *PreSplit) String() string { return proto.CompactTextString(m) }
func (*PreSplit) ProtoMessage()    {}
func (*PreSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{7}
}
func (m *PreSplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreSplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreSplit.Merge(m, src)
}
func (m *PreSplit) XXX_Size() int {
	return m.Size()
}
func (m *PreSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_PreSplit.DiscardUnknown(m)
}

var xxx_messageInfo_PreSplit proto.InternalMessageInfo

func (m *PreSplit) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *PreSplit) GetMemProps() *Properties {
	if m != nil {
		return m.MemProps
	}
	return nil
}

type Split struct {
	NewShards            []*Properties `protobuf:"bytes,1,rep,name=newShards,proto3" json:"newShards,omitempty"`
	Keys                 [][]byte      `protobuf:"bytes,3,rep,name=Keys,proto3" json:"Keys,omitempty"`
	MemProps             *Properties   `protobuf:"bytes,4,opt,name=memProps,proto3" json:"memProps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Split) Reset()         { *m = Split{} }
func (m *Split) String() string { return proto.CompactTextString(m) }
func (*Split) ProtoMessage()    {}
func (*Split) Descriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{8}
}
func (m *Split) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Split) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Split.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Split) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Split.Merge(m, src)
}
func (m *Split) XXX_Size() int {
	return m.Size()
}
func (m *Split) XXX_DiscardUnknown() {
	xxx_messageInfo_Split.DiscardUnknown(m)
}

var xxx_messageInfo_Split proto.InternalMessageInfo

func (m *Split) GetNewShards() []*Properties {
	if m != nil {
		return m.NewShards
	}
	return nil
}

func (m *Split) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *Split) GetMemProps() *Properties {
	if m != nil {
		return m.MemProps
	}
	return nil
}

type Properties struct {
	ShardID              uint64   `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Values               [][]byte `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Properties) Reset()         { *m = Properties{} }
func (m *Properties) String() string { return proto.CompactTextString(m) }
func (*Properties) ProtoMessage()    {}
func (*Properties) Descriptor() ([]byte, []int) {
	return fileDescriptor_28897cbba7ba85e2, []int{9}
}
func (m *Properties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Properties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Properties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Properties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Properties.Merge(m, src)
}
func (m *Properties) XXX_Size() int {
	return m.Size()
}
func (m *Properties) XXX_DiscardUnknown() {
	xxx_messageInfo_Properties.DiscardUnknown(m)
}

var xxx_messageInfo_Properties proto.InternalMessageInfo

func (m *Properties) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Properties) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *Properties) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterEnum("sdbpb.SplitStage", SplitStage_name, SplitStage_value)
	proto.RegisterType((*ChangeSet)(nil), "sdbpb.ChangeSet")
	proto.RegisterType((*Compaction)(nil), "sdbpb.Compaction")
	proto.RegisterType((*Flush)(nil), "sdbpb.Flush")
	proto.RegisterType((*Snapshot)(nil), "sdbpb.Snapshot")
	proto.RegisterType((*SplitFiles)(nil), "sdbpb.SplitFiles")
	proto.RegisterType((*L0Create)(nil), "sdbpb.L0Create")
	proto.RegisterType((*TableCreate)(nil), "sdbpb.TableCreate")
	proto.RegisterType((*PreSplit)(nil), "sdbpb.PreSplit")
	proto.RegisterType((*Split)(nil), "sdbpb.Split")
	proto.RegisterType((*Properties)(nil), "sdbpb.Properties")
}

func init() { proto.RegisterFile("changeset.proto", fileDescriptor_28897cbba7ba85e2) }

var fileDescriptor_28897cbba7ba85e2 = []byte{
	// 781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0xff, 0x24, 0x6a, 0x24, 0xd9, 0xea, 0xd6, 0x28, 0x16, 0x45, 0x21, 0x10, 0x44, 0x81,
	0x0a, 0x2e, 0xea, 0xb6, 0x2e, 0xd0, 0x7b, 0x2b, 0x5b, 0xa8, 0x50, 0xd9, 0x15, 0x96, 0x6a, 0x7b,
	0x34, 0x28, 0x6a, 0x2c, 0xa9, 0x25, 0x45, 0x96, 0x5c, 0xbb, 0x71, 0x72, 0x0c, 0x90, 0x57, 0x48,
	0x1e, 0x29, 0x87, 0x1c, 0xf2, 0x00, 0x39, 0x04, 0xce, 0x8b, 0x04, 0xbb, 0xfc, 0xb7, 0xe5, 0xc4,
	0xb9, 0xed, 0x7c, 0xf3, 0x71, 0x7e, 0x3f, 0x8d, 0x60, 0xcf, 0x5b, 0xb9, 0x9b, 0x25, 0x26, 0xc8,
	0x0f, 0xa3, 0x38, 0xe4, 0x21, 0x31, 0x92, 0xc5, 0x3c, 0x9a, 0xdb, 0x6f, 0x34, 0x68, 0x0d, 0xa5,
	0xcb, 0x41, 0x4e, 0x28, 0x34, 0x93, 0x95, 0x1b, 0x2f, 0xc6, 0xc7, 0x54, 0xb1, 0x94, 0x81, 0xce,
	0x72, 0x93, 0x7c, 0x09, 0xa6, 0x7c, 0xfe, 0x85, 0x31, 0x55, 0xa5, 0xab, 0xb0, 0xc9, 0x8f, 0x00,
	0x5e, 0x18, 0x44, 0xae, 0xc7, 0xd7, 0xe1, 0x86, 0xea, 0x96, 0x32, 0x68, 0x1f, 0x7d, 0x76, 0x28,
	0xe3, 0x1f, 0x0e, 0x0b, 0x07, 0xab, 0x90, 0x88, 0x0d, 0xc6, 0x85, 0x7f, 0x99, 0xac, 0xa8, 0x21,
	0xd9, 0x9d, 0x8c, 0x3d, 0x12, 0x18, 0x4b, 0x5d, 0xe4, 0x5b, 0x30, 0x93, 0x8d, 0x1b, 0x25, 0xab,
	0x90, 0xd3, 0x86, 0xa4, 0xed, 0x65, 0x34, 0x27, 0x83, 0x59, 0x41, 0x20, 0xdf, 0x80, 0x91, 0x70,
	0x77, 0x89, 0xb4, 0x69, 0x29, 0x83, 0xdd, 0x22, 0xbd, 0x13, 0xf9, 0x6b, 0xee, 0x08, 0x07, 0x4b,
	0xfd, 0x22, 0x6a, 0x14, 0xa3, 0xc4, 0xa9, 0x59, 0x8b, 0x3a, 0xcd, 0x60, 0x56, 0x10, 0x44, 0x67,
	0x89, 0x78, 0x8c, 0xd6, 0x3e, 0x26, 0xb4, 0x55, 0xeb, 0xcc, 0x29, 0x1c, 0xac, 0x42, 0x12, 0x9d,
	0x49, 0x8b, 0x42, 0xad, 0xb3, 0x34, 0x72, 0xea, 0x22, 0x16, 0xb4, 0xe5, 0xf0, 0x8e, 0xd1, 0x47,
	0x8e, 0xb4, 0x6d, 0x29, 0x03, 0x93, 0x55, 0x21, 0x39, 0x6e, 0xfc, 0xef, 0x12, 0x37, 0x1e, 0xd2,
	0x4e, 0x36, 0xee, 0xcc, 0x26, 0x07, 0xd0, 0xdb, 0xe0, 0x23, 0x7e, 0x8a, 0xc1, 0xcc, 0x9d, 0xfb,
	0xe8, 0xac, 0x1f, 0x23, 0xed, 0x5a, 0xca, 0x40, 0x63, 0x77, 0x70, 0xfb, 0x95, 0x02, 0x50, 0xae,
	0x80, 0xec, 0x82, 0xea, 0x5d, 0xc8, 0xd5, 0x1a, 0x4c, 0xf5, 0x2e, 0xc8, 0x3e, 0x18, 0x3e, 0x5e,
	0xa1, 0x2f, 0x57, 0xda, 0x65, 0xa9, 0x41, 0x7e, 0x86, 0x0e, 0x17, 0x11, 0x86, 0x31, 0xba, 0x1c,
	0x13, 0xaa, 0x59, 0xda, 0xa0, 0x7d, 0x44, 0xb2, 0x4e, 0x66, 0xa5, 0x8b, 0xd5, 0x78, 0xa4, 0x0f,
	0xc0, 0xc3, 0x28, 0xed, 0x20, 0xa1, 0xba, 0xa5, 0x0d, 0x74, 0x56, 0x41, 0xc8, 0xd7, 0xd0, 0x9d,
	0x87, 0x9c, 0x87, 0x41, 0x4e, 0x31, 0x24, 0xa5, 0x0e, 0x8a, 0xd6, 0x63, 0xfc, 0x07, 0x3d, 0x8e,
	0x0b, 0xb9, 0x76, 0x93, 0x15, 0xb6, 0x3d, 0x05, 0x63, 0x94, 0x6b, 0xc3, 0xff, 0x21, 0xcd, 0x2b,
	0xdb, 0x29, 0xb7, 0x38, 0xc9, 0x60, 0x56, 0x10, 0x44, 0x44, 0x2f, 0x0c, 0x82, 0x35, 0x9f, 0x39,
	0xb9, 0x76, 0x73, 0xdb, 0x7e, 0xa6, 0x82, 0x99, 0xcb, 0x49, 0x8c, 0x23, 0xe1, 0x6e, 0xcc, 0x65,
	0xc8, 0x0e, 0x4b, 0x0d, 0xd2, 0x03, 0x0d, 0x37, 0x0b, 0xf9, 0x65, 0x87, 0x89, 0xa7, 0x90, 0x45,
	0x14, 0x87, 0x11, 0xc6, 0x7c, 0x2d, 0xc7, 0x53, 0x95, 0xc5, 0xb4, 0x70, 0xb0, 0x0a, 0x89, 0x7c,
	0x05, 0x2d, 0xb9, 0xfb, 0xdf, 0xf1, 0x3a, 0x1d, 0x4d, 0x87, 0x95, 0x00, 0xf9, 0x0e, 0x5a, 0x79,
	0xb5, 0xe9, 0x54, 0xb6, 0xf4, 0x53, 0x32, 0xee, 0x2c, 0xa8, 0xf1, 0xc0, 0x05, 0x55, 0x07, 0xd1,
	0xbc, 0x35, 0x88, 0xe7, 0x0a, 0x40, 0x29, 0xe9, 0x7a, 0x45, 0xca, 0x27, 0x57, 0xa4, 0x3e, 0xb0,
	0x22, 0x3b, 0xfb, 0x2e, 0x57, 0x84, 0x26, 0x15, 0x51, 0xc3, 0xec, 0xa7, 0x0a, 0x98, 0x79, 0x4e,
	0xa1, 0xe0, 0xe2, 0x38, 0xa9, 0xd9, 0x5d, 0x0a, 0x5c, 0xdf, 0xc7, 0x84, 0x67, 0x1b, 0x2a, 0x6c,
	0x71, 0xcd, 0xe6, 0xeb, 0xe5, 0x52, 0xb8, 0x34, 0xe9, 0xca, 0xcd, 0x5b, 0x0b, 0xd4, 0x1f, 0xb0,
	0x40, 0xfb, 0x1a, 0xda, 0x95, 0x36, 0xee, 0xd4, 0xb1, 0xfd, 0x97, 0xb4, 0x0b, 0xea, 0x70, 0x24,
	0x93, 0x1b, 0x4c, 0x1d, 0x8e, 0x6a, 0xd5, 0xea, 0xf7, 0x57, 0x6b, 0xd4, 0xaa, 0xb5, 0x4f, 0xc1,
	0xcc, 0x6f, 0x13, 0x21, 0xa0, 0x4b, 0x09, 0x29, 0x52, 0x42, 0x7a, 0xa6, 0x1e, 0x33, 0xc0, 0x40,
	0xd4, 0x9d, 0xc8, 0xf4, 0x5b, 0x7b, 0x29, 0x28, 0xf6, 0x13, 0x30, 0xd2, 0x58, 0xdf, 0x43, 0x6b,
	0x83, 0xff, 0x3b, 0xe2, 0xec, 0xe4, 0x3b, 0xde, 0xf2, 0x61, 0xc9, 0x29, 0x92, 0x6b, 0xf7, 0x24,
	0xd7, 0x3f, 0x9e, 0x9c, 0x01, 0x94, 0xf8, 0x07, 0xfe, 0x6f, 0x08, 0xe8, 0xff, 0x8a, 0x54, 0x42,
	0x48, 0x2d, 0x26, 0xdf, 0xe4, 0x0b, 0x68, 0x5c, 0xb9, 0xfe, 0x25, 0xe6, 0x05, 0x64, 0xd6, 0xc1,
	0xdf, 0x99, 0x72, 0xe5, 0x9d, 0x27, 0x6d, 0x68, 0x8e, 0xcf, 0xc6, 0xb3, 0xf1, 0x2f, 0x93, 0xde,
	0x0e, 0xe9, 0x42, 0x6b, 0xca, 0x4e, 0xce, 0x9d, 0xe9, 0x64, 0x3c, 0xeb, 0x29, 0x84, 0xc2, 0x7e,
	0x61, 0x9e, 0x8f, 0x26, 0x7f, 0x3a, 0xbf, 0x9d, 0x1f, 0xff, 0x71, 0x76, 0xd2, 0x53, 0xc9, 0xe7,
	0xb0, 0x97, 0xa1, 0xe3, 0xc9, 0x49, 0x0a, 0x6a, 0xbf, 0xf6, 0x5e, 0xde, 0xf4, 0x95, 0xd7, 0x37,
	0x7d, 0xe5, 0xed, 0x4d, 0x5f, 0x79, 0xf1, 0xae, 0xbf, 0x33, 0x6f, 0xc8, 0x3f, 0xcf, 0x9f, 0xde,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x02, 0x10, 0xfe, 0xed, 0x4f, 0x07, 0x00, 0x00,
}

func (m *ChangeSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NextMemTableSize != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.NextMemTableSize))
		i--
		dAtA[i] = 0x68
	}
	if m.Sequence != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x60
	}
	if m.ShardDelete {
		i--
		if m.ShardDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Split != nil {
		{
			size, err := m.Split.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.SplitFiles != nil {
		{
			size, err := m.SplitFiles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.PreSplit != nil {
		{
			size, err := m.PreSplit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Stage != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x38
	}
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Flush != nil {
		{
			size, err := m.Flush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Compaction != nil {
		{
			size, err := m.Compaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ShardVer != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.ShardVer))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Compaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Compaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Compaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rejected {
		i--
		if m.Rejected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.BottomDeletes) > 0 {
		dAtA8 := make([]byte, len(m.BottomDeletes)*10)
		var j7 int
		for _, num := range m.BottomDeletes {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintChangeset(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TopDeletes) > 0 {
		dAtA10 := make([]byte, len(m.TopDeletes)*10)
		var j9 int
		for _, num := range m.TopDeletes {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintChangeset(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TableCreates) > 0 {
		for iNdEx := len(m.TableCreates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TableCreates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChangeset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Level != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Cf != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.Cf))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Flush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Flush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Flush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommitTS != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.CommitTS))
		i--
		dAtA[i] = 0x10
	}
	if m.L0Create != nil {
		{
			size, err := m.L0Create.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommitTS != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.CommitTS))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TableCreates) > 0 {
		for iNdEx := len(m.TableCreates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TableCreates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChangeset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.L0Creates) > 0 {
		for iNdEx := len(m.L0Creates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L0Creates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChangeset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SplitKeys) > 0 {
		for iNdEx := len(m.SplitKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SplitKeys[iNdEx])
			copy(dAtA[i:], m.SplitKeys[iNdEx])
			i = encodeVarintChangeset(dAtA, i, uint64(len(m.SplitKeys[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Properties != nil {
		{
			size, err := m.Properties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.End) > 0 {
		i -= len(m.End)
		copy(dAtA[i:], m.End)
		i = encodeVarintChangeset(dAtA, i, uint64(len(m.End)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Start) > 0 {
		i -= len(m.Start)
		copy(dAtA[i:], m.Start)
		i = encodeVarintChangeset(dAtA, i, uint64(len(m.Start)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SplitFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplitFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TableDeletes) > 0 {
		dAtA14 := make([]byte, len(m.TableDeletes)*10)
		var j13 int
		for _, num := range m.TableDeletes {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintChangeset(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TableCreates) > 0 {
		for iNdEx := len(m.TableCreates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TableCreates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChangeset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.L0Creates) > 0 {
		for iNdEx := len(m.L0Creates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L0Creates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChangeset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *L0Create) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L0Create) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L0Create) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Properties != nil {
		{
			size, err := m.Properties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Biggest) > 0 {
		i -= len(m.Biggest)
		copy(dAtA[i:], m.Biggest)
		i = encodeVarintChangeset(dAtA, i, uint64(len(m.Biggest)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Smallest) > 0 {
		i -= len(m.Smallest)
		copy(dAtA[i:], m.Smallest)
		i = encodeVarintChangeset(dAtA, i, uint64(len(m.Smallest)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TableCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Biggest) > 0 {
		i -= len(m.Biggest)
		copy(dAtA[i:], m.Biggest)
		i = encodeVarintChangeset(dAtA, i, uint64(len(m.Biggest)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Smallest) > 0 {
		i -= len(m.Smallest)
		copy(dAtA[i:], m.Smallest)
		i = encodeVarintChangeset(dAtA, i, uint64(len(m.Smallest)))
		i--
		dAtA[i] = 0x22
	}
	if m.CF != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.CF))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PreSplit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreSplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreSplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemProps != nil {
		{
			size, err := m.MemProps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintChangeset(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Split) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Split) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Split) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemProps != nil {
		{
			size, err := m.MemProps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangeset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintChangeset(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NewShards) > 0 {
		for iNdEx := len(m.NewShards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewShards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChangeset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Properties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Properties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Properties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintChangeset(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintChangeset(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ShardID != 0 {
		i = encodeVarintChangeset(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChangeset(dAtA []byte, offset int, v uint64) int {
	offset -= sovChangeset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChangeSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovChangeset(uint64(m.ShardID))
	}
	if m.ShardVer != 0 {
		n += 1 + sovChangeset(uint64(m.ShardVer))
	}
	if m.Compaction != nil {
		l = m.Compaction.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.Flush != nil {
		l = m.Flush.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.Stage != 0 {
		n += 1 + sovChangeset(uint64(m.Stage))
	}
	if m.PreSplit != nil {
		l = m.PreSplit.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.SplitFiles != nil {
		l = m.SplitFiles.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.Split != nil {
		l = m.Split.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.ShardDelete {
		n += 2
	}
	if m.Sequence != 0 {
		n += 1 + sovChangeset(uint64(m.Sequence))
	}
	if m.NextMemTableSize != 0 {
		n += 1 + sovChangeset(uint64(m.NextMemTableSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Compaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cf != 0 {
		n += 1 + sovChangeset(uint64(m.Cf))
	}
	if m.Level != 0 {
		n += 1 + sovChangeset(uint64(m.Level))
	}
	if len(m.TableCreates) > 0 {
		for _, e := range m.TableCreates {
			l = e.Size()
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if len(m.TopDeletes) > 0 {
		l = 0
		for _, e := range m.TopDeletes {
			l += sovChangeset(uint64(e))
		}
		n += 1 + sovChangeset(uint64(l)) + l
	}
	if len(m.BottomDeletes) > 0 {
		l = 0
		for _, e := range m.BottomDeletes {
			l += sovChangeset(uint64(e))
		}
		n += 1 + sovChangeset(uint64(l)) + l
	}
	if m.Rejected {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Flush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L0Create != nil {
		l = m.L0Create.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.CommitTS != 0 {
		n += 1 + sovChangeset(uint64(m.CommitTS))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovChangeset(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if len(m.SplitKeys) > 0 {
		for _, b := range m.SplitKeys {
			l = len(b)
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if len(m.L0Creates) > 0 {
		for _, e := range m.L0Creates {
			l = e.Size()
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if len(m.TableCreates) > 0 {
		for _, e := range m.TableCreates {
			l = e.Size()
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if m.CommitTS != 0 {
		n += 1 + sovChangeset(uint64(m.CommitTS))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SplitFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.L0Creates) > 0 {
		for _, e := range m.L0Creates {
			l = e.Size()
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if len(m.TableCreates) > 0 {
		for _, e := range m.TableCreates {
			l = e.Size()
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if len(m.TableDeletes) > 0 {
		l = 0
		for _, e := range m.TableDeletes {
			l += sovChangeset(uint64(e))
		}
		n += 1 + sovChangeset(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *L0Create) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovChangeset(uint64(m.ID))
	}
	l = len(m.Smallest)
	if l > 0 {
		n += 1 + l + sovChangeset(uint64(l))
	}
	l = len(m.Biggest)
	if l > 0 {
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovChangeset(uint64(m.ID))
	}
	if m.Level != 0 {
		n += 1 + sovChangeset(uint64(m.Level))
	}
	if m.CF != 0 {
		n += 1 + sovChangeset(uint64(m.CF))
	}
	l = len(m.Smallest)
	if l > 0 {
		n += 1 + l + sovChangeset(uint64(l))
	}
	l = len(m.Biggest)
	if l > 0 {
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PreSplit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if m.MemProps != nil {
		l = m.MemProps.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Split) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewShards) > 0 {
		for _, e := range m.NewShards {
			l = e.Size()
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if m.MemProps != nil {
		l = m.MemProps.Size()
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Properties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovChangeset(uint64(m.ShardID))
	}
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChangeset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChangeset(x uint64) (n int) {
	return sovChangeset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChangeSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardVer", wireType)
			}
			m.ShardVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardVer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compaction == nil {
				m.Compaction = &Compaction{}
			}
			if err := m.Compaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flush == nil {
				m.Flush = &Flush{}
			}
			if err := m.Flush.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &Snapshot{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= SplitStage(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreSplit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreSplit == nil {
				m.PreSplit = &PreSplit{}
			}
			if err := m.PreSplit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SplitFiles == nil {
				m.SplitFiles = &SplitFiles{}
			}
			if err := m.SplitFiles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Split", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Split == nil {
				m.Split = &Split{}
			}
			if err := m.Split.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShardDelete = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextMemTableSize", wireType)
			}
			m.NextMemTableSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextMemTableSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Compaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cf", wireType)
			}
			m.Cf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cf |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableCreates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableCreates = append(m.TableCreates, &TableCreate{})
			if err := m.TableCreates[len(m.TableCreates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChangeset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TopDeletes = append(m.TopDeletes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChangeset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChangeset
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChangeset
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TopDeletes) == 0 {
					m.TopDeletes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChangeset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TopDeletes = append(m.TopDeletes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TopDeletes", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChangeset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BottomDeletes = append(m.BottomDeletes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChangeset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChangeset
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChangeset
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BottomDeletes) == 0 {
					m.BottomDeletes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChangeset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BottomDeletes = append(m.BottomDeletes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomDeletes", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rejected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rejected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Flush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0Create", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L0Create == nil {
				m.L0Create = &L0Create{}
			}
			if err := m.L0Create.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTS", wireType)
			}
			m.CommitTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = append(m.Start[:0], dAtA[iNdEx:postIndex]...)
			if m.Start == nil {
				m.Start = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = append(m.End[:0], dAtA[iNdEx:postIndex]...)
			if m.End == nil {
				m.End = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = &Properties{}
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitKeys = append(m.SplitKeys, make([]byte, postIndex-iNdEx))
			copy(m.SplitKeys[len(m.SplitKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0Creates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L0Creates = append(m.L0Creates, &L0Create{})
			if err := m.L0Creates[len(m.L0Creates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableCreates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableCreates = append(m.TableCreates, &TableCreate{})
			if err := m.TableCreates[len(m.TableCreates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTS", wireType)
			}
			m.CommitTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0Creates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L0Creates = append(m.L0Creates, &L0Create{})
			if err := m.L0Creates[len(m.L0Creates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableCreates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableCreates = append(m.TableCreates, &TableCreate{})
			if err := m.TableCreates[len(m.TableCreates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChangeset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TableDeletes = append(m.TableDeletes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChangeset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChangeset
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChangeset
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TableDeletes) == 0 {
					m.TableDeletes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChangeset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TableDeletes = append(m.TableDeletes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TableDeletes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L0Create) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L0Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L0Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smallest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Smallest = append(m.Smallest[:0], dAtA[iNdEx:postIndex]...)
			if m.Smallest == nil {
				m.Smallest = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biggest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biggest = append(m.Biggest[:0], dAtA[iNdEx:postIndex]...)
			if m.Biggest == nil {
				m.Biggest = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = &Properties{}
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CF", wireType)
			}
			m.CF = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CF |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smallest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Smallest = append(m.Smallest[:0], dAtA[iNdEx:postIndex]...)
			if m.Smallest == nil {
				m.Smallest = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biggest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biggest = append(m.Biggest[:0], dAtA[iNdEx:postIndex]...)
			if m.Biggest == nil {
				m.Biggest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreSplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreSplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreSplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemProps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemProps == nil {
				m.MemProps = &Properties{}
			}
			if err := m.MemProps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Split) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Split: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Split: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewShards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewShards = append(m.NewShards, &Properties{})
			if err := m.NewShards[len(m.NewShards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemProps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemProps == nil {
				m.MemProps = &Properties{}
			}
			if err := m.MemProps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Properties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Properties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Properties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChangeset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChangeset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChangeset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChangeset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChangeset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChangeset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChangeset = fmt.Errorf("proto: unexpected end of group")
)
